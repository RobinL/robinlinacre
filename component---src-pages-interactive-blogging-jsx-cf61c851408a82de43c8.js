(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{SIAW:function(e,t,n){"use strict";n.r(t);n("q1tI");var o=n("o0o1"),a=n.n(o),i=(n("rE2o"),n("ioFf"),n("rGqo"),n("ls82"),n("h4VS"));function r(e){this.wrapped=e}function s(e){return new r(e)}function b(e){var t,n;function o(t,n){try{var i=e[t](n),s=i.value,b=s instanceof r;Promise.resolve(b?s.wrapped:s).then((function(e){b?o("next",e):a(i.done?"return":"normal",e)}),(function(e){o("throw",e)}))}catch(c){a("throw",c)}}function a(e,a){switch(e){case"return":t.resolve({value:a,done:!0});break;case"throw":t.reject(a);break;default:t.resolve({value:a,done:!1})}(t=t.next)?o(t.key,t.arg):n=null}this._invoke=function(e,a){return new Promise((function(i,r){var s={key:e,arg:a,resolve:i,reject:r,next:null};n?n=n.next=s:(t=n=s,o(e,a))}))},"function"!=typeof e.return&&(this.return=void 0)}function c(){var e=Object(i.a)(["## mdx\n\nAnother good option within the gatsby ecosystem for authoring interactive pages is mdx.  This is an excellent choice if you want to, for instance, write a blog post in markdown [like this](https://robinl.github.io/robinlinacre/my_mdx_page) but add a vega lite chart.\n\nYou can find an example of a component that renders mdx [here](https://github.com/RobinL/robinlinacre/blob/c375c64428bad3021c90594e5d976dc31080de83/src/pages/my_mdx_page.jsx#L1), an `mdx` page that includes a vega lite chart [here](https://github.com/RobinL/robinlinacre/blob/c375c64428bad3021c90594e5d976dc31080de83/src/mdx/first_post.mdx) and a pull request that adds code syntax highlighting for these pages [here](https://github.com/RobinL/robinlinacre/pull/18/files).\n\n"],["## mdx\n\nAnother good option within the gatsby ecosystem for authoring interactive pages is mdx.  This is an excellent choice if you want to, for instance, write a blog post in markdown [like this](https://robinl.github.io/robinlinacre/my_mdx_page) but add a vega lite chart.\n\nYou can find an example of a component that renders mdx [here](https://github.com/RobinL/robinlinacre/blob/c375c64428bad3021c90594e5d976dc31080de83/src/pages/my_mdx_page.jsx#L1), an \\`mdx\\` page that includes a vega lite chart [here](https://github.com/RobinL/robinlinacre/blob/c375c64428bad3021c90594e5d976dc31080de83/src/mdx/first_post.mdx) and a pull request that adds code syntax highlighting for these pages [here](https://github.com/RobinL/robinlinacre/pull/18/files).\n\n"]);return c=function(){return e},e}function l(){var e=Object(i.a)(["## Authoring workflow\n\nOnce all this is set up, the authoring process is very simple:\n\n**Step 1 - author your notebook and get the link**\n\nWrite an observable notebook, and publish it. Click the 'download code' button to get a link to the javascript module.  In the case of [this post](https://observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb), the link to the code is `https://api.observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb.tgz?v=3`.  \n\n**Step 2 - yarn add the notebook to gatsby**\n\nIn your gatsby website, install the notebook using \n\n```sh\nyarn add https://api.observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb.tgz?v=3\n```\n\n**Step 3 - create a new page**\n\nCreate a new page in your gatsby `src/pages/` directory called, say `interactive_blogging.jsx`.\n\nAdd the following boilerplate:\n\n```js\nimport define from \"@robinl/interactive-blogging-with-observable-notebooks-and-gatsb\"\nimport ObservablePage from \"../components/obs_page\"\n\nexport default ({ data }) => (\n    ObservablePage(define)\n)\n```\n\n\nThat's it!\n\nTo update a page is even easier - you just retrieve the version number of the notebook from 'history' page with the Observable notebook, and manually update the `yarn.lock` file with the new version number. See [here](https://github.com/RobinL/robinlinacre/commit/ad9255cc57cecfeaf3a93f6b8c9707abad558686) for an example.\n\n\nYou can find an example of all the code you need to add a page [here](https://github.com/RobinL/robinlinacre/pull/19), which is the pull request that created the page you're reading right now!\n\n"],["## Authoring workflow\n\nOnce all this is set up, the authoring process is very simple:\n\n**Step 1 - author your notebook and get the link**\n\nWrite an observable notebook, and publish it. Click the 'download code' button to get a link to the javascript module.  In the case of [this post](https://observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb), the link to the code is \\`https://api.observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb.tgz?v=3\\`.  \n\n**Step 2 - yarn add the notebook to gatsby**\n\nIn your gatsby website, install the notebook using \n\n\\`\\`\\`sh\nyarn add https://api.observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb.tgz?v=3\n\\`\\`\\`\n\n**Step 3 - create a new page**\n\nCreate a new page in your gatsby \\`src/pages/\\` directory called, say \\`interactive_blogging.jsx\\`.\n\nAdd the following boilerplate:\n\n\\`\\`\\`js\nimport define from \"@robinl/interactive-blogging-with-observable-notebooks-and-gatsb\"\nimport ObservablePage from \"../components/obs_page\"\n\nexport default ({ data }) => (\n    ObservablePage(define)\n)\n\\`\\`\\`\n\n\nThat's it!\n\nTo update a page is even easier - you just retrieve the version number of the notebook from 'history' page with the Observable notebook, and manually update the \\`yarn.lock\\` file with the new version number. See [here](https://github.com/RobinL/robinlinacre/commit/ad9255cc57cecfeaf3a93f6b8c9707abad558686) for an example.\n\n\nYou can find an example of all the code you need to add a page [here](https://github.com/RobinL/robinlinacre/pull/19), which is the pull request that created the page you're reading right now!\n\n"]);return l=function(){return e},e}function h(){var e=Object(i.a)(["## Continuous deployment\n\nI use Github actions for continuous deployment.  Specifically, any commits merged into dev trigger a workflow which builds the site, and pushes it to master, thus making it available as a github page.\n\nYou can see the action [here](https://github.com/RobinL/gasby_observable_blog/blob/dev/.github/workflows/main.yml).  Note you will need to generate a secret containing a [Github PAT](https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line) and add it to your repo's secrets.  The enables the workflow to commit code back to your repo.\n"]);return h=function(){return e},e}function d(){var e=Object(i.a)(['## Rendering notebooks in gatsby\n\nI use a React component to display each Observable notebook within a div - see [here](https://github.com/RobinL/gasby_observable_blog/blob/dev/src/components/observable_div.jsx) for the implementation.  \n\nI then have an [page component](https://github.com/RobinL/gasby_observable_blog/blob/dev/src/components/obs_page.js) that serves as a default layout for each page on my website which contains a notebook.  \n\nEach notebook is a standard gatsby page which imports the Observable notebook, and then passes it to the page component.  [Here\'s](https://github.com/RobinL/gasby_observable_blog/blob/dev/src/pages/gatsby-test-2.js) an example.   `output_order` allows the author to control which cells are displayed and in what order.\n\nFor a long time I experimented with the idea of loading all notebooks from a json file, and then using createPage (e.g. like  [this](https://github.com/RobinL/gasby_observable_blog/blob/14537c158c2c729cb985a56c5acc5d292c958379/gatsby-node.js#L25) to create the pages,  rather than needing a separate `jsx` page for each notebook.  The json would look like this:\n\n```json\n[\n    {   "page_path": "page1",\n        "observable_note_name": "gatsby-test"\n    },\n    {   \n        "page_path": "page2",\n        "observable_note_name": "gatsby-test-2",\n        "output_order": ["cell1", "cell2"]\n    }\n]\n```\n\nI now don\'t think this is possible, because of the way webpack works.  See [here](https://stackoverflow.com/questions/58011164/dynamic-module-import-in-component-for-gatsby-js-site).\n\n'],['## Rendering notebooks in gatsby\n\nI use a React component to display each Observable notebook within a div - see [here](https://github.com/RobinL/gasby_observable_blog/blob/dev/src/components/observable_div.jsx) for the implementation.  \n\nI then have an [page component](https://github.com/RobinL/gasby_observable_blog/blob/dev/src/components/obs_page.js) that serves as a default layout for each page on my website which contains a notebook.  \n\nEach notebook is a standard gatsby page which imports the Observable notebook, and then passes it to the page component.  [Here\'s](https://github.com/RobinL/gasby_observable_blog/blob/dev/src/pages/gatsby-test-2.js) an example.   \\`output_order\\` allows the author to control which cells are displayed and in what order.\n\nFor a long time I experimented with the idea of loading all notebooks from a json file, and then using createPage (e.g. like  [this](https://github.com/RobinL/gasby_observable_blog/blob/14537c158c2c729cb985a56c5acc5d292c958379/gatsby-node.js#L25) to create the pages,  rather than needing a separate \\`jsx\\` page for each notebook.  The json would look like this:\n\n\\`\\`\\`json\n[\n    {   "page_path": "page1",\n        "observable_note_name": "gatsby-test"\n    },\n    {   \n        "page_path": "page2",\n        "observable_note_name": "gatsby-test-2",\n        "output_order": ["cell1", "cell2"]\n    }\n]\n\\`\\`\\`\n\nI now don\'t think this is possible, because of the way webpack works.  See [here](https://stackoverflow.com/questions/58011164/dynamic-module-import-in-component-for-gatsby-js-site).\n\n']);return d=function(){return e},e}function u(){var e=Object(i.a)(["## Gastby.js as a site generator\n\nGatsby js is a modern website generator that uses the React framework.  Javascript modules can be installed as dependencies, and used within pages on your website.  \n\nThis is a good fit because each Observable notebook can be compiled and downloaded as a JavaScript module - see [here](https://observablehq.com/@observablehq/downloading-and-embedding-notebooks) - and so can be installed and made available as a part of a Gatsby site."]);return u=function(){return e},e}function g(){var e=Object(i.a)(["This website contains a variety of interactive content like my [energy usage calculator](https://robinl.github.io/robinlinacre/energy-usage) which I can create easily and host for free.  In this post I explain how the it all works.\n\n## Observable notebooks\n\nI use [Observable Notebooks](https://observablehq.com) as the authoring environment for interactive content.  This is my favourite programming environment because it allows me to [maximise the time I spend on the fun part of programming](https://observablehq.com/@tmcw/why-observable-for-people-who-already-have-a-text-editor).\n\nThis allows readers to not only view the code behind each page ([including this one!](https://observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb)), but also to live-edit it and fork it.  On the [Observable Notebooks](https://observablehq.com) homepage, you can see that the ability to reuse, re-mix and iterate leads to an amazing amount of creativity.\n\nI then use [gatsby.js](gatsbyjs.org) to build my notebooks into a website.  \n\nThe idea is that you end up with the best of all worlds:  A fun, simple authoring environment with unlimited power for interactivity, which can be hosted for free on a static web host like Github pages.\n\nWhat follows are a few notes about how I got everything working.  If you'd rather jump straight into the code, you can find a minimal, working template [here](https://github.com/robinl/gasby_observable_blog/), and the code for my blog is [here](https://github.com/robinl/robinlinacre).\n"]);return g=function(){return e},e}function p(){var e=Object(i.a)(["<h1>","</h1>"]);return p=function(){return e},e}function m(){var e=Object(i.a)(["<h1>","</h1>"]);return m=function(){return e},e}function v(){var e=Object(i.a)(["","",""]);return v=function(){return e},e}function f(){var e=Object(i.a)(["<span>",""]);return f=function(){return e},e}function y(){var e=Object(i.a)(["<span>","</span>"]);return y=function(){return e},e}function w(){var e=Object(i.a)(["# Interactive blogging with Observable Notebooks and gatsby.js"]);return w=function(){return e},e}function k(e,t){var n=e.module();return n.variable(t()).define(["md"],(function(e){return e(w())})),n.variable(t("message")).define("message",["Promises","html","d3"],function(){var e,t=(e=a.a.mark((function e(t,n,o){var i,r,b,c,l,h,d,u,g,w,k,_,x;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:i=0,r="Interactive blogging with Observable Notebooks and gatsby.js";case 2:if(!(i<r.length)){e.next=15;break}return e.next=5,s(t.delay(40));case 5:return(c=n(y(),r.substr(i,1))).style.color=o.interpolateViridis(i/r.length),c.setAttribute("value",i),c.setAttribute("ascending","ascending"),b=0==i?n(f(),c):n(v(),b.innerHTML,c),i+=1,e.next=13,n(m(),b);case 13:e.next=2;break;case 15:if(!(i>=r.length)){e.next=44;break}return e.next=18,s(t.delay(100));case 18:for(l=n(p(),b),h=l.firstChild.children,d=!0,u=!1,g=void 0,e.prev=23,w=h[Symbol.iterator]();!(d=(k=w.next()).done);d=!0)_=k.value,(x=+_.getAttribute("value"))==r.length|-1==x&&_.toggleAttribute("ascending"),_.hasAttribute("ascending")?x--:x++,_.setAttribute("value",x),_.style.color=o.interpolateViridis(x/r.length);e.next=31;break;case 27:e.prev=27,e.t0=e.catch(23),u=!0,g=e.t0;case 31:e.prev=31,e.prev=32,d||null==w.return||w.return();case 34:if(e.prev=34,!u){e.next=37;break}throw g;case 37:return e.finish(34);case 38:return e.finish(31);case 39:return i+=1,e.next=42,l;case 42:e.next=15;break;case 44:case"end":return e.stop()}}),e,null,[[23,27,31,39],[32,,34,38]])})),function(){return new b(e.apply(this,arguments))});return function(e,n,o){return t.apply(this,arguments)}}()),n.variable(t("md1")).define("md1",["md"],(function(e){return e(g())})),n.variable(t("md2")).define("md2",["md"],(function(e){return e(u())})),n.variable(t("md3")).define("md3",["md"],(function(e){return e(d())})),n.variable(t("md4")).define("md4",["md"],(function(e){return e(h())})),n.variable(t("md5")).define("md5",["md"],(function(e){return e(l())})),n.variable(t("md6")).define("md6",["md"],(function(e){return e(c())})),n.variable(t("d3")).define("d3",["require"],(function(e){return e("d3")})),n}"function"==typeof Symbol&&Symbol.asyncIterator&&(b.prototype[Symbol.asyncIterator]=function(){return this}),b.prototype.next=function(e){return this._invoke("next",e)},b.prototype.throw=function(e){return this._invoke("throw",e)},b.prototype.return=function(e){return this._invoke("return",e)};var _=n("56Sw"),x=n("qKvR");n.d(t,"frontmatter",(function(){return j}));var j={title:"Interactive blogging with Observable Notebooks and gatsby.js",post_date:"2019-10-11",code_url:"https://observablehq.com/@robinl/interactive-blogging-with-observable-notebooks-and-gatsb",post_type:"obs",post_category:"data"},O=["message","md1","md2","md3","md4","md5","md6"];t.default=function(e){e.data;return Object(x.c)(_.a,{define:k,output_order:O,post_frontmatter:j})}}}]);
//# sourceMappingURL=component---src-pages-interactive-blogging-jsx-cf61c851408a82de43c8.js.map